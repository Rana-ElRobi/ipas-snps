install.packages("TriadSim")
install.packages("snpStats")
install.packages("snpStatsWriter")
importIntoEnv(	methods, parallel, snpStats, foreach, doParallel)
importIntoEnv(	methods)
library(TriadSim)
install.packages("TriadSim")
install.packages("snpStats")
setRepositories()
setRepositories(ind = c(1:6, 8))
ap <- available.packages()
data()
ap["foobarbaz", "Depends"]
ap
library(installr)
updateR()
library(installr)
install.packages("installr")
install.packages("snpStats", type = "source")
install.packages("TriadSim", type = "source")
library(TriadSim)
?TriadSim
setwd("~/Desktop/Rs-Work/simulat-SNPs")
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
TriadSim(input.plink.file
, out.put.file=paste(tempdir(),'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
TriadSim(input.plink.file
, out.put.file=paste("/home/rana/Desktop/Rs-Work/simulat-SNPs/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
source('~/.active-rstudio-document')
getwd()
target.path <- paste0(curr.dir,"/snps-results/triad1.bim")
curr.dir <- getwd()
target.path <- paste0(curr.dir,"/snps-results/triad1.bim")
target.path
snps.file <- read.table(target.path)
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
library(scrime)
library(TriadSim)
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
curr.dir <- getwd()
curr.dir
get.Snps.list <- function()
{
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
#, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
# access results and take subset of snps names = n.snp
target.path <- paste0(curr.dir,"/snps-results/triad1.bim")
snps.file <- read.table(target.path)
}
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
curr.dir
setwd("~/Desktop/Rs-Work/ipas-snps")
curr.dir <- getwd()
curr.dir
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
target.path <- paste0(curr.dir,"/snps-results/triad1.bim")
snps.file <- read.table(target.path)
head(snps.file)
head(snps.file[1])
head(snps.file[1,])
head(snps.file[,2])
n.snps <- 100 # number of snps
get.Snps.matrix <- function(n.snps)
{
# Simulate a data set containing 2000 observations (1000 cases
# and 1000 controls) and 100 SNPs, where one three-way and two
# two-way interactions are chosen randomly to be explanatory
# for the case-control status.
obs <- 2000 # number of observations
#n.snps <- 100 # number of snps
intr.vec <- c(3, 2, 2) # interactions
# call genrate function
sim.snps <- simulateSNPs(obs , n.snps , intr.vec )
# matrix of data
#View(sim.snps$data)
return(sim.snps$data)
}
snps.names <- snps.file[1:n.snp,2]
n.snps <- 100 # number of snps
snps.pathogenicity <- get.Snps.matrix(n.snps)
snps.names <- get.Snps.list(n.snps)
get.Snps.list <- function(n.snp)
{
# access results and take subset of snps names = n.snp
target.path <- paste0(curr.dir,"/snps-results/triad1.bim")
# check if file exist
if (!file.exists(target.path))
{
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
#, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
}
snps.file <- read.table(target.path)
head(snps.file)
# subset n.snps names
snps.names <- snps.file[1:n.snps,2]
return(snps.names)
}
snps.names <- get.Snps.list(n.snps)
head(snps.names)
colnames(snps.pathogenicity)
colnames(snps.pathogenicity) = snps.names
colnames(snps.pathogenicity)
View(get.Snps.matrix)
View(snps.pathogenicity)
snps.sourcePath = "generate-snps-data.R"
source(snps.sourcePath)
target.snps <- 150
snps.names  = simulate.snps.data(target.snps) [1]
snps.data = simulate.snps.data(target.snps)
simulate.snps.data <- function(n.snps = 100)
{
# get pathogenecity matrix
snps.pathogenicity <- get.Snps.matrix(n.snps)
#colnames(snps.pathogenicity)
# get snps names
snps.names <- get.Snps.list(n.snps)
head(snps.names)
# update matric snps names
colnames(snps.pathogenicity) = snps.names
return(c(snps.names,snps.pathogenicity))
}
snps.sourcePath = "generate-snps-data.R"
source(snps.sourcePath)
target.snps <- 150
snps.data = simulate.snps.data(target.snps)
snps.names
install.packages("eqtl")
library(eqtl)
install.packages("qtl")
library(qtl)
library(eqtl)
View(snps.names)
snps.names
head(snps.names)
chromosomes.list <- c(1,8,17,20)
curr.dir
curr.chr.path <- paste0(curr.dir,"/snps-results/triad",chromosomes.list[i],"bim")
snps.file <- read.table(target.path)
head(snps.file)
q.n.snps <- n.snps/4
curr.chr.path <- paste0(curr.dir,"/snps-results/triad",chromosomes.list[i],"bim")
curr.chr.path <- paste0(curr.dir,"/snps-results/triad",chromosomes.list[1],"bim")
snps.file <- read.table(curr.chr.path)
curr.chr.path <- paste0(curr.dir,"/snps-results/triad",chromosomes.list[1],".bim")
snps.file <- read.table(curr.chr.path)
head(snps.file)
q.snps.names <- snps.file[1:n.snps,2]
q.n.snps
q.snps.names
q.snps.names <- snps.file[1:q.n.snps,2]
q.snps.names
class(snps.names)
snps.names <- matrix(0,nrow = 1,ncol = 3)
snps.file <- read.table(curr.chr.path)
head(snps.file)
q.snps.names <- snps.file[1:q.n.snps,2]
snps.names <- rbind(snps.names,q.snps.names)
q.snps.info <- snps.file[1:q.n.snps,c(2,1,4)]
head(q.snps.info)
snps.names <- rbind(snps.names,q.snps.names)
snps.names <- rbind(snps.names,q.snps.info)
q.snps.info <- snps.file[1:q.n.snps,c(2,1,4),header = FALSE]
snps.names <- matrix(c("",0,123),nrow = 1,ncol = 3)
snps.file <- read.table(curr.chr.path)
head(snps.file)
q.snps.info <- snps.file[1:q.n.snps,c(2,1,4)]
snps.names <- rbind(snps.names,q.snps.info)
snps.names <- matrix(c("",0,123),nrow = 1,ncol = 3,colnames("SNP-Name","chr-number","position"))
snps.names <- matrix(c("x",0,123),nrow = 1,ncol = 3,colnames("SNP-Name","chr-number","position"))
snps.mat <- matrix(c("x",0,123),nrow = 1,ncol = 3)
colnames(snps.mat) <-  c("SNP-Name","chr-number","position")
head(snps.mat)
snps.mat <- matrix(c("x",as.factor(0),as.numeric(123)),nrow = 1,ncol = 3)
colnames(snps.mat) <-  c("SNP-Name","chr-number","position")
head(snps.mat)
q.snps.info <- snps.file[1:q.n.snps,c(2,1,4)]
colnames(q.snps.info) <- c("SNP-Name","chr-number","position")
head(q.snps.info)
snps.mat <- rbind(snps.mat,q.snps.info)
snps.mat <- matrix(c("x",as.numeric(0),as.numeric(123)),nrow = 1,ncol = 3)
colnames(snps.mat) <-  c("SNP-Name","chr-number","position")
head(snps.mat)
snps.mat <- rbind(snps.mat,q.snps.info)
snps.mat <- matrix(0,nrow = 1,ncol = 3)
colnames(snps.mat) <-  c("SNP-Name","chr-number","position")
head(snps.mat)
head(q.snps.info)
snps.mat <- rbind(snps.mat,q.snps.info)
head(snps.mat)
snps.info <- as.matrix(snps.mat[2:n.snps,])
return(snps.info)
head(snps.info)
get.Snps.list <- function(n.snp)
{
# access results and take subset of snps names = n.snp
target.chrmosome <- paste0(curr.dir,"/snps-results/triad1.bim")
# check if file exist
if (!file.exists(target.path))
{
m.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_mom',sep='')
f.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_dad',sep='')
k.file <- paste(system.file(package = "TriadSim"),'/extdata/pop1_4chr_kid',sep='')
input.plink.file <- c(m.file, f.file, k.file)
curr.dir <- getwd()
#, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
TriadSim(input.plink.file
, out.put.file=paste(curr.dir,"/snps-results/",'triad',sep='')
, fr.desire=0.05
, pathways=list(1:4,5:8)
, n.ped=1000
, N.brk=3
, target.snp=NA
, P0=0.001
, is.OR=FALSE
, risk.exposure= 1
, risk.pathway.unexposed=c(1.5, 2)
, risk.pathway.exposed=c(1.5, 2)
, is.case=TRUE
, e.fr=NA
, pop1.frac=NA
, P0.ratio=1
, rcmb.rate
, no_cores=NA)
}
# list of current snps chromosomes
chromosomes.list <- c(1,8,17,20)
# quarter the n.snps
q.n.snps <- n.snps/4
# create empty matrix of (snps.name, chromosome.number , position)
#  snps.mat <- matrix(c("x",as.factor(0),as.numeric(123)),nrow = 1,ncol = 3)
snps.mat <- matrix(0,nrow = 1,ncol = 3)
colnames(snps.mat) <-  c("SNP-Name","chr-number","position")
head(snps.mat)
for (i in range(1:length(chromosomes.list)))
{
curr.chr.path <- paste0(curr.dir,"/snps-results/triad",chromosomes.list[i],".bim")
snps.file <- read.table(curr.chr.path)
head(snps.file)
# subset quarter the n.snps
q.snps.info <- snps.file[1:q.n.snps,c(2,1,4)]
colnames(q.snps.info) <- c("SNP-Name","chr-number","position")
head(q.snps.info)
# append to main snpa list
snps.mat <- rbind(snps.mat,q.snps.info)
head(snps.mat)
}
snps.info <- as.matrix(snps.mat[2:n.snps,])
head(snps.info)
return(snps.info)
}
View(snps.info)
